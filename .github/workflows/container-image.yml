name: Build container image

on:
  workflow_call:
    inputs:
      push-image:
        type: boolean
        required: true
      generate-sbom:
        type: boolean
        required: false
        default: true
    outputs:
      repository:
        description: "Repository used to build the container image"
        value: ${{ jobs.build.outputs.repository }}
      tag:
        description: "Tag used to build the container image"
        value: ${{ jobs.build.outputs.tag }}
      artifact:
        description: "Uploaded artifact with the container tarball"
        value: ${{ jobs.build.outputs.artifact }}
      digest:
        description: "Image digest"
        value: ${{ jobs.build.outputs.digest }}



jobs:
  build:
    name: Build container image
    runs-on: ubuntu-latest
    outputs:
      repository: ${{ steps.setoutput.outputs.repository }}
      tag: ${{ steps.setoutput.outputs.tag }}
      artifact: ${{ steps.setoutput.outputs.artifact }}
      digest: ${{ steps.setoutput.outputs.digest }}
    steps:
      -
        name: Checkout code
        uses: actions/checkout@v3
      -
        name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      -
        name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      -
        name: Install Golang
        uses: actions/setup-go@v3
        with:
          go-version: '1.17'
      -
        name: Install the bom command
        if: ${{ inputs.generate-sbom == true }}
        uses: kubewarden/github-actions/kubernetes-bom-installer@v1
      -
        name: Install Cosign
        if: ${{ inputs.generate-sbom == true }}
        uses: sigstore/cosign-installer@main
      -
        name: Retrieve tag name
        if: ${{ startsWith(github.ref, 'refs/heads/') }}
        run: |
          echo TAG_NAME=latest >> $GITHUB_ENV
      -
        name: Retrieve tag name
        if: ${{ startsWith(github.ref, 'refs/tags/') }}
        run: |
            echo TAG_NAME=$(echo $GITHUB_REF | sed -e "s|refs/tags/||") >> $GITHUB_ENV
      -
        name: Build and push container image
        if: ${{ inputs.push-image }}
        id: build-image
        uses: docker/build-push-action@v3
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64, linux/arm64
          push: true
          tags: |
            ghcr.io/${{github.repository_owner}}/kubewarden-controller:${{ env.TAG_NAME }}
      -
        name: Build linux/amd64 container image into .tar for e2e tests
        # This step is only triggered from e2e tests, e2e tests consume the
        # controller image as a tar.
        #
        # Only build amd64 because buildx does not allow multiple platforms when
        # exporting the image to a tarball. As we use this only for end-to-end tests
        # and they run on amd64 arch, let's skip the arm64 build for now.
        if: ${{ inputs.push-image == false }}
        uses: docker/build-push-action@v3
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64
          outputs: type=docker,dest=/tmp/kubewarden-controller-image-${{ env.TAG_NAME }}.tar
          tags: |
            ghcr.io/${{github.repository_owner}}/kubewarden-controller:${{ env.TAG_NAME }}
      -
        name: Create directory to store SBOM files
        shell: bash
        run: |
          mkdir kubewarden-controller-sboms
      -
        name: Create SBOM file of build
        if: ${{ inputs.generate-sbom == true }}
        shell: bash
        run: |
          bom generate -n https://kubewarden.io/kubewarden.spdx \
            --format json \
            . > kubewarden-controller-sboms/kubewarden-controller-sbom.spdx
      -
        name: Create SBOM file of container image
        if: ${{ inputs.generate-sbom == true }}
        shell: bash
        run: |
          bom generate -n https://kubewarden.io/kubewarden.spdx \
            --format json \
            --image "ghcr.io/${{github.repository_owner}}/kubewarden-controller@${{ steps.build-image.outputs.digest }}" \
            . > kubewarden-controller-sboms/kubewarden-controller-container-image-sbom.spdx
      - name: Sign SBOM files
        run: |
          cosign sign-blob --output-certificate kubewarden-controller-sboms/kubewarden-controller-sbom.spdx.cert \
            --output-signature kubewarden-controller-sboms/kubewarden-controller-sbom.spdx.sig \
            kubewarden-controller-sboms/kubewarden-controller-sbom.spdx
          cosign sign-blob --output-certificate kubewarden-controller-sboms/kubewarden-controller-container-image-sbom.spdx.cert \
            --output-signature kubewarden-controller-sboms/kubewarden-controller-container-image-sbom.spdx.sig \
            kubewarden-controller-sboms/kubewarden-controller-container-image-sbom.spdx
        env:
          COSIGN_EXPERIMENTAL: 1
      -
        name: Attach SBOM file of build in the container image
        if: ${{ inputs.generate-sbom == true }}
        shell: bash
        run: |
          set -e
          cosign attach sbom --sbom kubewarden-controller-sboms/kubewarden-controller.spdx \
            "ghcr.io/${{github.repository_owner}}/kubewarden-controller@${{ steps.build-image.outputs.digest }}"
      -
        name: Upload container image to use in other jobs
        # this step is only triggered from e2e tests, e2e tests consume the
        # controller image as a tar.
        if: ${{ inputs.push-image == false }}
        uses: actions/upload-artifact@v3
        with:
          name: kubewarden-controller-image-${{ env.TAG_NAME }}
          path: /tmp/kubewarden-controller-image-${{ env.TAG_NAME }}.tar
      -
        id: setoutput
        name: Set output parameters
        run: |
          echo "::set-output name=repository::ghcr.io/${{github.repository_owner}}/kubewarden-controller"
          echo "::set-output name=tag::${{ env.TAG_NAME }}"
          echo "::set-output name=artifact::kubewarden-controller-image-${{env.TAG_NAME}}"
          echo "::set-output name=digest::${{ steps.build-image.outputs.digest }}"

